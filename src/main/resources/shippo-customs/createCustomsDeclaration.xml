<?xml version="1.0" encoding="UTF-8"?>
<!--
 ~  Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 ~
 ~  WSO2 Inc. licenses this file to you under the Apache License,
 ~  Version 2.0 (the "License"); you may not use this file except
 ~  in compliance with the License.
 ~  You may obtain a copy of the License at
 ~
 ~    http://www.apache.org/licenses/LICENSE-2.0
 ~
 ~  Unless required by applicable law or agreed to in writing,
 ~  software distributed under the License is distributed on an
 ~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 ~  KIND, either express or implied.  See the License for the
 ~  specific language governing permissions and limitations
 ~  under the License.
-->

<template name="createCustomsDeclaration" xmlns="http://ws.apache.org/ns/synapse">
    <parameter name="certifySigner"
               description="The name of the person who created the customs declaration and is responsible for the validity of the information provided"/>
    <parameter name="isCertify"
               description="Boolean, Specifies whether the certify_signer has provided all information of this customs declaration truthfully"/>
    <parameter name="items"
               description="Distinct Parcel content items in a form of an Array of Customs Items object_ids"/>
    <parameter name="nonDeliveryOption"
               description="Indicates how the carrier should proceed in case the shipment can't be delivered"/>
    <parameter name="contentsType" description="Type of goods of the shipment"/>
    <parameter name="contentsExplanation" description="Explanation of the type of goods of the shipment"/>
    <parameter name="exporterReference" description="The exporter reference of an export shipment"/>
    <parameter name="importerReference" description="The importer reference of an import shipment"/>
    <parameter name="invoice" description="The invoice reference of the shipment"/>
    <parameter name="license" description="The license reference of the shipment"/>
    <parameter name="certificate" description="The certificate reference of the shipment"/>
    <parameter name="notes" description="The additional notes to be included in the customs declaration"/>
    <parameter name="eelPfcType" description="The EEL/PFC type of the shipment"/>
    <parameter name="aesItnRef" description="The AES/ITN reference of the shipment"/>
    <parameter name="incotermRef" description="The incoterm reference of the shipment"/>
    <parameter name="metadata"
               description="The metadata is a string of up to 100 characters that can be filled with any additional information you want to attach to the object"/>

    <sequence>
        <property name="uri.var.certifySigner" expression="$func:certifySigner"/>
        <property name="uri.var.isCertify" expression="$func:isCertify"/>
        <property name="uri.var.items" expression="$func:items"/>
        <property name="uri.var.nonDeliveryOption" expression="$func:nonDeliveryOption"/>
        <property name="uri.var.contentsType" expression="$func:contentsType"/>
        <property name="uri.var.contentsExplanation" expression="$func:contentsExplanation"/>
        <property name="uri.var.exporterReference" expression="$func:exporterReference"/>
        <property name="uri.var.importerReference" expression="$func:importerReference"/>
        <property name="uri.var.invoice" expression="$func:invoice"/>
        <property name="uri.var.license" expression="$func:license"/>
        <property name="uri.var.certificate" expression="$func:certificate"/>
        <property name="uri.var.notes" expression="$func:notes"/>
        <property name="uri.var.eelPfcType" expression="$func:eelPfcType"/>
        <property name="uri.var.aesItnRef" expression="$func:aesItnRef"/>
        <property name="uri.var.incotermRef" expression="$func:incotermRef"/>
        <property name="uri.var.metadata" expression="$func:metadata"/>

        <payloadFactory media-type="json">
            <format>
                {
                "certify_signer":"$1",
                "certify":"$2",
                "items":$3,
                "non_delivery_option":"$4",
                "contents_type":"$5"
                }
            </format>
            <args>
                <arg expression="get-property('uri.var.certifySigner')"/>
                <arg expression="get-property('uri.var.isCertify')"/>
                <arg expression="get-property('uri.var.items')"/>
                <arg expression="get-property('uri.var.nonDeliveryOption')"/>
                <arg expression="get-property('uri.var.contentsType')"/>
            </args>
        </payloadFactory>

        <!-- Checking the optional parameters and create the payload accordingly -->
        <script language="js">
            <![CDATA[

				var contentsExplanation = mc.getProperty('uri.var.contentsExplanation');
				var exporterReference = mc.getProperty('uri.var.exporterReference');
				var importerReference = mc.getProperty('uri.var.importerReference');
				var invoice = mc.getProperty('uri.var.invoice');
				var license = mc.getProperty('uri.var.license');
				var certificate = mc.getProperty('uri.var.certificate');
				var notes = mc.getProperty('uri.var.notes');
				var eelPfcType = mc.getProperty('uri.var.eelPfcType');
				var aesItnRef = mc.getProperty('uri.var.aesItnRef');
				var incotermRef = mc.getProperty('uri.var.incotermRef');
				var metadata = mc.getProperty('uri.var.metadata');
						
				var payload = mc.getPayloadJSON();
				
				if (contentsExplanation != null && contentsExplanation != "") {
					payload.contents_explanation = contentsExplanation;	
				}
				if (exporterReference != null && exporterReference != "") {
					payload.exporter_reference = exporterReference;	
				}
				if (importerReference != null && importerReference != "") {
					payload.importer_reference = importerReference;	
				}
				if (invoice != null && invoice != "") {
					payload.invoice = invoice;	
				}
				if (license != null && license != "") {
					payload.license = license;	
				}
				if (certificate != null && certificate != "") {
					payload.certificate = certificate;	
				}
				if (notes != null && notes != "") {
					payload.notes = notes;	
				}
				if (eelPfcType != null && eelPfcType != "") {
					payload.eel_pfc = eelPfcType;	
				}
				if (aesItnRef != null && aesItnRef != "") {
					payload.aes_itn = aesItnRef;	
				}
				if (incotermRef != null && incotermRef != "") {
					payload.incoterm = incotermRef;	
				}
				if (metadata != null && metadata != "") {
					payload.metadata = metadata;	
				}
				
				mc.setPayloadJSON(payload);
			]]>
        </script>

        <property name="DISABLE_CHUNKING" value="true" scope="axis2"/>

        <call>
            <endpoint>
                <http method="post" uri-template="{uri.var.apiUrl}/v1/customs/declarations"/>
            </endpoint>
        </call>

        <!-- Remove custom headers from response -->
        <header name="P3p" scope="transport" action="remove"/>
        <header name="Vary" scope="transport" action="remove"/>
        <header name="Allow" scope="transport" action="remove"/>
        <header name="Via" scope="transport" action="remove"/>
        <header name="Www-Authenticate" scope="transport" action="remove"/>

    </sequence>
</template>